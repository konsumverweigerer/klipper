# Config for extruder testing
[stepper_x]
step_pin: PF0
dir_pin: PF1
enable_pin: !PD7
microsteps: 16
rotation_distance: 40
endstop_pin: ^PE5
position_endstop: 0
position_max: 200
homing_speed: 50

[stepper_y]
step_pin: PF6
dir_pin: !PF7
enable_pin: !PF2
microsteps: 16
rotation_distance: 40
endstop_pin: ^PJ1
position_endstop: 0
position_max: 200
homing_speed: 50

[stepper_z]
step_pin: PL3
dir_pin: PL1
enable_pin: !PK0
microsteps: 16
rotation_distance: 8
endstop_pin: ^PD3
position_endstop: 0.5
position_max: 200

[extruder]
step_pin: PA4
dir_pin: PA6
enable_pin: !PA2
microsteps: 16
rotation_distance: 32
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: PB4
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PK5
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 0
max_temp: 210

[extruder_stepper extruder1]
extruder: #extruder
step_pin: PH5
dir_pin: PH6
enable_pin: !PB5
microsteps: 16
rotation_distance: 32

[extruder_stepper extruder2]
extruder: #extruder
step_pin: PH3
dir_pin: PH4
enable_pin: !PB6
microsteps: 16
rotation_distance: 32

[mixingextruder]
steppers: extruder, extruder1, extruder2

[mcu]
serial: /dev/ttyACM0

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[gcode_macro Check_Stepper_Pos]
gcode:
    {% set tics = printer['mixingextruder'].mixing_ticks.split(",") %}
    {% set pos_A = params.A|default("x") %}
    {% set pos_B = params.B|default("x") %}
    {% set pos_C = params.C|default("x") %}
    {% if pos_A != "x" %}
      {% if tics[0] == pos_A %}
        {action_respond_info("Position A matches expectation %s"%(pos_A))}
      {% else %}
        {action_raise_error("Wrong A position %s/%s"%(tics[0], pos_A))}
      {% endif %}
    {% endif %}
    {% if pos_B != "x" %}
      {% if tics[1] == pos_B %}
        {action_respond_info("Position B matches expectation %s"%(pos_B))}
      {% else %}
        {action_raise_error("Wrong B position %s/%s"%(tics[1], pos_B))}
      {% endif %}
    {% endif %}
    {% if pos_C != "x" %}
      {% if tics[2] == pos_C %}
        {action_respond_info("Position C matches expectation %s"%(pos_C))}
      {% else %}
        {action_raise_error("Wrong C position %s/%s"%(tics[2], pos_C))}
      {% endif %}
    {% endif %}
